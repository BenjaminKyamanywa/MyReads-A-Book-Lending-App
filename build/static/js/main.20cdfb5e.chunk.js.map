{"version":3,"sources":["components/Title.js","BooksAPI.js","components/Book.js","components/BooksShelfRow.js","components/BooksShelf.js","components/AddBook.js","components/Guide.js","components/Search.js","App.js","index.js"],"names":["Title","className","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","Book","props","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","e","onShelfUpdate","target","disabled","title","authors","join","BooksShelfRow","this","length","map","index","key","Component","BooksShelf","state","allBooks","shelfName","updateIndex","findIndex","b","updateBook","setState","slice","BooksAPI","shelfRows","name","filter","AddBook","to","Guide","Search","booksOnDisplay","query","updateQuery","maxResults","results","searchResults","s","type","placeholder","searchBooks","BooksApp","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20cdfb5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n\treturn(\r\n    \t<div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n       \t\t</div>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default Title","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query, maxResults })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Book = (props) => {\r\n\r\n\tconst noCoverImage = ''\r\n\r\n\treturn(\r\n\t\t<li>\r\n          \t\t<div className=\"book\">\r\n          \t\t\t<div className=\"book-top\">\r\n        \t\t\t\t<div \r\n          \t\t\t\t\tclassName=\"book-cover\" \r\n          \t\t\t\t\tstyle={{ width: 128, \r\n          \t\t\t\t\t\t\t height: 193, \r\n          \t\t\t\t\t\t\t backgroundImage: `url(${props.book.imageLinks ? props.book.imageLinks.thumbnail : noCoverImage})` }}>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"book-shelf-changer\">\r\n                        <select value={props.book.shelf} onChange={e => props.onShelfUpdate(props.book, e.target.value)}>\r\n                          <option value=\"move\" disabled>Move to...</option>\r\n                          <option value=\"currentlyReading\">Currently Reading</option>\r\n                          <option value=\"wantToRead\">Want to Read</option>\r\n                          <option value=\"read\">Read</option>\r\n                          <option value=\"none\">None</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n          \t\t\t<div className=\"book-title\">{props.book.title ? props.book.title : ''}</div>\r\n        \t\t\t<div className=\"book-authors\">{props.book.authors ? props.book.authors.join(', ') : ''}</div>\r\n          \t\t</div>\r\n          \t</li>\r\n\t)\r\n}\r\n\r\nBook.propTypes = {\r\n\tbook: PropTypes.object.isRequired,\r\n  \tonShelfUpdate: PropTypes.func\r\n}\r\n\r\nexport default Book","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Book from './Book'\r\n\r\nclass BooksShelfRow extends Component {\r\n\trender(){\r\n      \r\n      \tconst {title, books, onShelfUpdate } = this.props\r\n      \r\n    \treturn(\r\n        \t<div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">{title}</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n\t\t\t\t\t\t{books.length > 0 ? (books.map((book, index) => (\r\n                          <Book\r\n                            key={index}\r\n                            book={book}\r\n                            onShelfUpdate={onShelfUpdate}\r\n                          />\r\n                        )))\r\n                        : (<p>No Books in this shelf</p>)\r\n                        }\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nBooksShelfRow.propTypes = {\r\n\t  title: PropTypes.string.isRequired,\r\n  \tbooks: PropTypes.array,\r\n  \tonShelfUPdate: PropTypes.func\r\n}\r\n\r\nexport default BooksShelfRow","import React, { Component } from 'react'\r\nimport * as BooksAPI from '../BooksAPI'\r\nimport BooksShelfRow from './BooksShelfRow'\r\n\r\nclass BooksShelf extends Component {\r\n  \r\n  \tstate = {\r\n    \tallBooks: []\r\n    }\r\n\r\n\tcomponentDidMount(){\r\n    \tBooksAPI.getAll()\r\n\t\t\t.then(books => {\r\n            \tthis.setState({ allBooks: books })\r\n            })\r\n    }\r\n\t\r\n\tonShelfUpdate = (book, shelfName) => {\r\n    \tconst { allBooks } = this.state\r\n        const updateIndex = allBooks.findIndex(b => b.id === book.id)\r\n        const updateBook = allBooks[updateIndex]\r\n        updateBook.shelf = shelfName\r\n      \t\r\n      \tthis.setState({\r\n        \tallBooks: [...allBooks.slice(0, updateIndex), updateBook, ...allBooks.slice(updateIndex + 1)]\r\n        })\r\n\r\n\t\tBooksAPI.update(book, shelfName)\r\n    }\r\n\r\n\trender(){\r\n    \tconst { allBooks } = this.state\r\n\t\t\r\n\t\tconst shelfRows = [\r\n          {\r\n            name: 'Read',\r\n            books: allBooks.filter(book => book.shelf === 'read')\r\n          },\r\n          {\r\n            name: 'Current Reading',\r\n            books: allBooks.filter(book => book.shelf === 'currentlyReading')\r\n          },\r\n          {\r\n            name: 'Want To Read',\r\n            books: allBooks.filter(book => book.shelf === 'wantToRead')\r\n          }\r\n        ]\r\n\r\n\treturn(\r\n    \t<div className=\"list-books-content\">\r\n      \t\t<ul>\r\n        {shelfRows && shelfRows.map((shelf, index) => (\r\n        <BooksShelfRow\r\n        key={index}\r\n  title={shelf.name}\r\n  books={shelf.books}\r\n  onShelfUpdate={this.onShelfUpdate}/>\r\n  ))}\r\n      \t\t</ul>\r\n      \t</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BooksShelf;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst AddBook = () => {\r\n\treturn (\r\n    \t<div className=\"open-search\">\r\n      \t\t<Link to=\"/search\">\r\n      \t\t\tSearch\r\n      \t\t</Link>\r\n      \t</div>\r\n    )\r\n}\r\n\r\nexport default AddBook","import React from 'react'\r\nimport Title from './Title'\r\nimport BooksShelf from './BooksShelf'\r\nimport AddBook from './AddBook'\r\n\r\nconst Guide = () => {\r\n\treturn(\r\n    \t<div className=\"main-page\">\r\n      \t\t<Title />\r\n      \t\t<BooksShelf />\r\n      \t\t<AddBook />\r\n      \t</div>\r\n    )\r\n}\r\n\r\nexport default Guide","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from '../BooksAPI'\r\nimport Book from './Book'\r\n\r\nclass Search extends Component {\r\n  \tstate = {\r\n    \tbooks: [],\r\n      \tbooksOnDisplay: [],\r\n      \tquery: ''\r\n    }\r\n\t\r\n\tcomponentDidMount(){\r\n    \tBooksAPI.getAll()\r\n\t\t\t.then(allBooks => {\r\n            \tthis.setState({\r\n                \tbooksOnDisplay: allBooks.filter(book => book.shelf !== 'none')\r\n                })\r\n            })\r\n    }\r\n\r\n\tupdateQuery(query){\r\n    \tthis.setState({ query })\r\n    }\r\n\r\n\tonShelfUpdate = (book, shelfName) => {\r\n    \tBooksAPI.update(book, shelfName)\r\n      \tconst { books } = this.state\r\n        const updateIndex = books.findIndex(b => b.id === book.id)\r\n        const updateBook = books[updateIndex]\r\n        updateBook.shelf = shelfName\r\n      \r\n      \tthis.setState({\r\n    \t\tbooks: [...books.slice(0, updateIndex), updateBook, ...books.slice(updateIndex + 1)]\r\n        })\r\n    }\r\n\r\n\tsearchBooks(query){\r\n    \tconst { booksOnDisplay } = this.state\r\n\t\tthis.updateQuery(query)\r\n\t\t\tif(query){\r\n            \tBooksAPI.search(query, 20)\r\n\t\t\t\t\t.then(results => {\r\n                    \tif(results && results.length > 0){\r\n                           let searchResults = results\r\n                           searchResults.map((book) => book.shelf = 'none')\r\n                           booksOnDisplay.map((book) => {\r\n                           const updateIndex = searchResults.findIndex(s => s.id === book.id)\r\n                           if(searchResults[updateIndex]){\r\n                            \tsearchResults[updateIndex].shelf = book.shelf\r\n                            }\r\n                             return this;\r\n                           })\r\n                          \tthis.setState({ books: searchResults })\r\n                         } else {\r\n                        \tthis.setState({ books: [] }) \r\n                         }\r\n                    })\t\r\n            } else {\r\n            \tthis.setState({ books: [] })\r\n            }\r\n    }\r\n\t\t\r\n\trender(){\r\n      \r\n      const { books, query } = this.state\r\n\r\n    \treturn(\r\n        \t<div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to=\"/\" className=\"close-search\" />\r\n              <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input type=\"text\" \r\n\t\t\t\t placeholder=\"Search by title or author\"\r\n\t\t\t\t onChange={(e) => this.searchBooks(e.target.value)}\r\n\t\t\t\t/>\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n\t\t\t\t{\r\n              books.length > 0 ? (books.map((book, index) => (\r\n              <Book\r\n                key={index}\r\n                book={book}\r\n                onShelfUpdate={this.onShelfUpdate}\r\n      \t\t  />\r\n                )))\r\n                : ( query.length === 0 ? (<p>No query entered</p>) : (<p>No Results Found</p>) )\r\n                }\r\n\t\t\t  </ol>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React, { Component } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport './App.css'\r\nimport Guide from './components/Guide'\r\nimport Search from './components/Search'\r\n\r\nclass BooksApp extends Component {\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"app\">\r\n       <Switch>\r\n      \t  <Route exact path=\"/\" component={Guide} />\r\n      \t  <Route path=\"/search\" component={Search} />\r\n      \t</Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n <BrowserRouter>\r\n  \t<App />\r\n </BrowserRouter>\r\n  , document.getElementById('root'))\r\n"],"sourceRoot":""}